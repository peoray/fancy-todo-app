{"version":3,"sources":["assets/images/beer_celebration.svg","components/todo/todo.component.jsx","components/date/date.component.jsx","components/add-todo/add-todo.component.jsx","components/completed-todos/completed-todos.component.jsx","components/custom-button/custom-button.component.jsx","components/todo-list/todo-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","todo","deleteTodo","toggleTodoCompleted","className","type","id","onChange","htmlFor","title","onClick","bind","Today","Date","getDay","today","dd","getDate","mm","getMonth","getFullYear","AddTodo","handleChange","addTodo","onSubmit","value","placeholder","classnames","active","Completed","toggleTodoUnCompleted","checked","CustomButton","children","otherCustomButtonProps","TodoList","state","showCompleted","this","props","todos","completedTodos","clearAll","percentage","length","map","index","key","src","Img","alt","Math","round","setState","prevState","Component","App","e","preventDefault","target","duplicateItem","filter","todoItem","isNaN","toUpperCase","newTodo","uuid","completed","handlePercentage","precentage","concat","numberOfUnCompletedTodos","Number","numberOfCompletedTodos","json","localStorage","getItem","JSON","parse","json2","error","console","log","prevProps","stringify","setItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43e92bc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beer_celebration.075a777d.svg\";","import React from \"react\";\nimport \"../todo/todo.styles.css\";\n\nconst Todo = ({ todo, deleteTodo, toggleTodoCompleted }) => {\n  return (\n    <div>\n      <input\n        className=\"todo-checkbox\"\n        type=\"checkbox\"\n        id={`item_${todo.id}`}\n        onChange={() => toggleTodoCompleted(todo.id)}\n      />\n      <label htmlFor={`item_${todo.id}`}></label>\n      <span className=\"todo-text\">{todo.title}</span>\n      <span className=\"delete\" onClick={deleteTodo.bind(this, todo.id)}></span>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport './date.styles.css';\n\nconst Today = () => {\n  const getDate = () => {\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth() + 1; //January is 0!\n    var yyyy = today.getFullYear();\n    if (dd < 10) {\n      dd = '0' + dd;\n    }\n    if (mm < 10) {\n      mm = '0' + mm;\n    }\n\n    return mm + '-' + dd + '-' + yyyy;\n  };\n\n  const getDay = () => {\n    var weekday = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday'\n    ];\n    var today = new Date();\n\n    return weekday[today.getDay()];\n  };\n\n  return (\n    <div>\n      <h2 className=\"todo-title\">\n        {' '}\n        {getDay()} <br /> {getDate()}{' '}\n      </h2>\n    </div>\n  );\n};\n\nexport default Today;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./add-todo.styles.css\";\n\nconst AddTodo = ({ handleChange, todo, addTodo }) => {\n  return (\n    <div>\n      <form onSubmit={addTodo}>\n        <input\n          type=\"text\"\n          value={todo}\n          placeholder=\"Take the garbage out\"\n          onChange={handleChange}\n        />\n        <div\n          className={classnames(\"btn btn-add\", { active: todo })}\n          onClick={addTodo}\n        >\n          +\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddTodo;\n","import React from \"react\";\n// import './todo.styles.css';\n\nconst Completed = ({ todo, deleteTodo, toggleTodoUnCompleted }) => {\n  return (\n    <div>\n      <input\n        className=\"todo-checkbox\"\n        type=\"checkbox\"\n        id={`item_${todo.id}`}\n        checked={true}\n        onChange={() => toggleTodoUnCompleted(todo.id)}\n      />\n      <label htmlFor={`item_${todo.id}`}></label>\n      <span className=\"todo-text\">{todo.title}</span>\n      <span className=\"delete\" onClick={deleteTodo.bind(this, todo.id)}></span>\n    </div>\n  );\n};\n\nexport default Completed;\n","import React from \"react\";\nimport \"./custom-button.styles.css\";\n\nconst CustomButton = ({ children, ...otherCustomButtonProps }) => (\n  <div className=\"btn btn-secondary\" {...otherCustomButtonProps}>\n    {children}\n  </div>\n);\n\nexport default CustomButton;\n","import React, { Component } from \"react\";\nimport Todo from \"../todo/todo.component\";\nimport Today from \"../date/date.component\";\nimport AddTodo from \"../add-todo/add-todo.component\";\nimport Completed from \"../completed-todos/completed-todos.component\";\nimport Img from \"../../assets/images/beer_celebration.svg\"\n\nimport \"./todo-list.styles.css\";\nimport CustomButton from \"../custom-button/custom-button.component\";\n\nclass TodoList extends Component {\n  state = {\n    showCompleted: false\n  };\n\n  render() {\n    const {\n      todos,\n      completedTodos,\n      handleChange,\n      todo,\n      addTodo,\n      deleteTodo,\n      toggleTodoCompleted,\n      toggleTodoUnCompleted,\n      clearAll,\n      percentage\n    } = this.props;\n\n    return (\n      <div className=\"todo-wrapper\">\n        <Today />\n        <AddTodo handleChange={handleChange} todo={todo} addTodo={addTodo} />\n\n        {todos && todos.length > 0 ? (\n          <p className=\"status busy\">\n            You have {todos.length} pending todo item\n            {todos.length > 1 ? <span>s</span> : \"\"}\n          </p>\n        ) : null}\n\n        {todos.length > 0 ? (\n          <ul className=\"todo-list\">\n            {todos.map((todo, index) => (\n              <li key={todo.id}>\n                <Todo\n                  todo={todo}\n                  index={index}\n                  deleteTodo={deleteTodo}\n                  toggleTodoCompleted={toggleTodoCompleted}\n                />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"status free\">\n            <img src={Img} alt=\"celebration\" />\n            Time to chill! You have no todos.\n          </p>\n        )}\n\n        {completedTodos &&\n        completedTodos.length > 0 &&\n        this.state.showCompleted ? (\n          <p className=\"status busy\">\n            You have {Math.round(percentage)}% completed item\n            {completedTodos.length > 1 ? <span>s</span> : \"\"}\n          </p>\n        ) : null}\n\n        {completedTodos.length > 0 && this.state.showCompleted ? (\n          <ul className=\"todo-list archived\">\n            {completedTodos.map((todo, index) => (\n              <li key={todo.id}>\n                <Completed\n                  todo={todo}\n                  deleteTodo={deleteTodo}\n                  index={index}\n                  toggleTodoUnCompleted={toggleTodoUnCompleted}\n                />\n              </li>\n            ))}\n          </ul>\n        ) : null}\n\n        <div className=\"control-buttons\">\n          {completedTodos.length > 0 ? (\n            <CustomButton\n              onClick={() =>\n                this.setState(prevState => ({\n                  showCompleted: !prevState.showCompleted\n                }))\n              }\n            >\n              {!this.state.showCompleted || completedTodos.length === 0\n                ? \"Show Completed\"\n                : \"Hide Completed\"}\n            </CustomButton>\n          ) : null}\n\n          {todos.length > 0 || completedTodos.length > 0 ? (\n            <CustomButton onClick={clearAll}>Clear All</CustomButton>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport TodoList from \"./components/todo-list/todo-list.component\";\nimport uuid from \"uuid\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    todos: [],\n    completedTodos: [],\n    todo: \"\",\n    percentage: 0\n  };\n\n  handleChange = e => {\n    e.preventDefault();\n    this.setState({ todo: e.target.value });\n  };\n\n  addTodo = e => {\n    e.preventDefault();\n    const { todos, todo } = this.state;\n    const duplicateItem = todos.filter(todoItem => {\n      if (isNaN(todoItem)) {\n        return todoItem.title.toUpperCase() === todo.toUpperCase();\n      }\n      return todoItem === todo;\n    });\n    // validation: check if input field is empty or not\n    if (todo && duplicateItem.length === 0) {\n      const newTodo = {\n        id: uuid(),\n        title: todo,\n        completed: false\n      };\n      this.setState(\n        () => {\n          return { todos: [...todos, newTodo], todo: \"\" };\n        },\n        () => {\n          const percentage = this.handlePercentage();\n          this.setState({ percentage });\n        }\n      );\n    } else {\n      return false;\n    }\n  };\n\n  deleteTodo = id => {\n    const { todos, completedTodos } = this.state;\n    this.setState(\n      () => ({\n        todos: [...todos.filter(todo => todo.id !== id)],\n        completedTodos: [...completedTodos.filter(todo => todo.id !== id)]\n      }),\n      () => {\n        const precentage = this.handlePercentage();\n        this.setState({ precentage });\n      }\n    );\n  };\n\n  clearAll = () => {\n    this.setState({ todos: [], completedTodos: [] });\n  };\n\n  toggleTodoCompleted = index => {\n    this.setState(({ todos, completedTodos }) => {\n      return {\n        todos: todos.filter(todo => todo.id !== index),\n        completedTodos: completedTodos.concat(\n          todos.filter(todo => todo.id === index)\n        )\n      };\n    });\n  };\n\n  toggleTodoUnCompleted = index => {\n    this.setState(({ todos, completedTodos }) => {\n      return {\n        todos: todos.concat(completedTodos.filter(todo => todo.id === index)),\n        completedTodos: completedTodos.filter(todo => todo.id !== index)\n      };\n    });\n  };\n\n  handlePercentage = () => {\n    const { todos, completedTodos } = this.state;\n\n    const numberOfUnCompletedTodos = Number(todos.length);\n    const numberOfCompletedTodos = Number(completedTodos.length);\n\n    const totalNumberOfTodos = Number(\n      numberOfUnCompletedTodos + numberOfCompletedTodos\n    );\n    const precentageOfCompletedTodos =\n      (numberOfCompletedTodos * 100) / totalNumberOfTodos;\n    return precentageOfCompletedTodos;\n  };\n\n  componentDidMount() {\n    try {\n      const json = localStorage.getItem(\"todos\");\n      const todos = JSON.parse(json);\n      if (todos) {\n        this.setState({ todos });\n      }\n\n      const json2 = localStorage.getItem(\"completedTodos\");\n      const completedTodos = JSON.parse(json2);\n      if (completedTodos) {\n        this.setState({ completedTodos });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { todos, completedTodos } = this.state;\n\n    if (prevState.todos.length !== todos.length) {\n      const json = JSON.stringify(todos);\n      localStorage.setItem(\"todos\", json);\n    }\n\n    if (prevState.completedTodos.length !== completedTodos.length) {\n      const json2 = JSON.stringify(completedTodos);\n      localStorage.setItem(\"completedTodos\", json2);\n      const percentage = this.handlePercentage();\n      this.setState({ percentage });\n    }\n  }\n\n  render() {\n    const { todos, todo, completedTodos, percentage } = this.state;\n\n    return (\n      <div>\n        <h1>Daily To-Do list manager</h1>\n        <TodoList\n          todos={todos}\n          completedTodos={completedTodos}\n          handleChange={this.handleChange}\n          todo={todo}\n          addTodo={this.addTodo}\n          deleteTodo={this.deleteTodo}\n          clearAll={this.clearAll}\n          toggleTodoCompleted={this.toggleTodoCompleted}\n          toggleTodoUnCompleted={this.toggleTodoUnCompleted}\n          percentage={percentage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}